<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- 配置拦截器 写在上边  -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 指定拦截的目录 基于ant风格 -->
			<mvc:mapping path="/**"/>
			<!-- 指定不拦截的目录  -->
			<!--   取交集 -->
			<mvc:exclude-mapping path="/Handler/testUpload1"/>
			<bean class="org.wht.interceptor.MyInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 指定拦截的目录 基于ant风格 -->
			<mvc:mapping path="/**"/>
			<!-- 指定不拦截的目录  -->
			<!--   取交集 -->
			<mvc:exclude-mapping path="/Handler/testUpload1"/>
			<bean class="org.wht.interceptor.MySecondInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 扫描有注解的包 -->
	<context:component-scan
		base-package="org.wht.handler,org.wht.exception"></context:component-scan>

	<!-- 配置视图解析器(InternalResourceViewResolver) id 为了别的调用 这个不需要 id也就不需要写 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/views/"></property>
		<property name="suffix" value=".jsp"></property>
		<!-- 为handler层的返回值增加前缀和后缀 -->
	</bean>

	<!-- 加载国际化文件 找i18n 开头的文件 1.将ResourceBundleMessageSource在程序加载时 加入springmvc 
		springmvc在启动时 会自动查找id=messageSource的bean 2.如果配置了ResourceBundleMessageSource 
		则 该类会在程序响应时 介入 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean>

	<mvc:view-controller
		path="Handler/testMVCViewController" view-name="success" />
	<mvc:annotation-driven></mvc:annotation-driven>
	<!-- 如果一个requestMapping 请求 没有 对应的方法 会交给服务器默认的servlet去处理 -->
	<mvc:default-servlet-handler></mvc:default-servlet-handler>
	<!-- 配置自己的类型转换器 需要3步 -->
	<!-- 1.将自定义转换器 纳入SpringIOC容器 -->
	<bean id="myConverter" class="org.wht.converter.MyConverter"></bean>
	<!-- 2.将myConverter 纳入SpringMVC提供的转换器Bean -->
	<!-- <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="myConverter"/>
			</set>
		</property>
	</bean> -->
	<!-- 3.将conversionService注册到 annotation-driven中-->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
	<!-- 
	FormattingConversionServiceFactoryBean这个包含了ConversionServiceFactoryBean
	所有要用数据格式化和类型转换，只需要配置这一个依赖即可
	
	这个是开启了 数据格式化的注解
	@
	 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="myConverter"/>
			</set>
		</property>
	</bean> 
	<!-- 文件上传所需的CommonsMultipartResolver,id值固定写法 Spring初始化 会寻找该id 并加入ioc-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 102400  单位是字节b  =100kb  单个文件最大体积-->
		<property name="maxUploadSize" value="102400000"></property>
	</bean>
	<!--SimpleMappingExceptionResolver  (这个是全局的 ， 优先级没有类异常处理 高)以配置的方式处理异常  -->
<!-- 	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings" >
			相当于catch(ArithmeticException e)
			<props>
				<prop key="java.lang.ArithmeticException">
					跳转到-error
					error2
				</prop>
				<prop key="org.wht.handler.SceondSpringMVCHandler">
					跳转到-error
					error2
				</prop>
			</props>
		</property>
		会将异常放入value中  自动放入request域中  不写value 默认是exception
		<property name="exceptionAttribute" value="e">
		</property>
	</bean> -->
</beans>
